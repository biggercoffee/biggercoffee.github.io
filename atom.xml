<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoPing’s blog</title>
  <subtitle>技术，找回节操的力量。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaopingblog.cn/"/>
  <updated>2017-02-28T09:19:04.000Z</updated>
  <id>http://xiaopingblog.cn/</id>
  
  <author>
    <name>孝平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>debug环境下动态注入代码 for iOS</title>
    <link href="http://xiaopingblog.cn/2017/02/28/untitled-1488273302015/"/>
    <id>http://xiaopingblog.cn/2017/02/28/untitled-1488273302015/</id>
    <published>2017-02-28T09:15:02.000Z</published>
    <updated>2017-02-28T09:19:04.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/660127-c2cfbfe9708d3d55.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片来源于网络&quot;&gt;&lt;/p&gt;
&lt;p&gt;简书首发地址:&lt;a href=&quot;http://www.jianshu.com/p/1de7c38490c5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/1de7c38490c5&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;开发的时候，每次改动代码都要重新&lt;code&gt;run&lt;/code&gt;然后跑一遍app来测试改动代码。那么问题来了，有木有方案就是改完代码不用重新&lt;code&gt;run&lt;/code&gt;就能及时看到效果的呢，答案是&lt;code&gt;YES&lt;/code&gt;。&lt;br&gt;现在解决这一需求的方案网上也不算多，在此笔者特意分享一下笔者使用的工具和方案来提高开发效率。（不讲底层原理，只是纯属的分享一款app）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大神或者已经知道Injection的请绕道，本篇只是纯属分享技巧的文章，只是想让大家提高开发效率而已。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Xcode8以前（过期）&quot;&gt;&lt;a href=&quot;#Xcode8以前（过期）&quot; class=&quot;headerlink&quot; title=&quot;Xcode8以前（过期）&quot;&gt;&lt;/a&gt;Xcode8以前（过期）&lt;/h1&gt;&lt;p&gt;xcode8以前可以装插件的时代，可以利用&lt;code&gt;dyci-main&lt;/code&gt;和&lt;code&gt;Injection&lt;/code&gt;插件来进行代码注入。不过现在网上也有很多方法让Xcode8支持装插件，但是这样打包上传就会审核不过，而且略麻烦。（反正笔者现在是习惯了）&lt;br&gt;ps:&lt;code&gt;dyci-main&lt;/code&gt;和&lt;code&gt;Injection&lt;/code&gt;在&lt;code&gt;github&lt;/code&gt;上自行搜索即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Xcode8之后（含）&quot;&gt;&lt;a href=&quot;#Xcode8之后（含）&quot; class=&quot;headerlink&quot; title=&quot;Xcode8之后（含）&quot;&gt;&lt;/a&gt;Xcode8之后（含）&lt;/h1&gt;&lt;p&gt;Xcode8之后要动态注入代码要使用&lt;code&gt;Injection&lt;/code&gt; app，作者正是制作&lt;code&gt;Injection&lt;/code&gt;插件的人。因为xcode8不支持了插件，特意有制作了一个app，下载地址：&lt;a href=&quot;http://johnholdsworth.com/injection.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://johnholdsworth.com/injection.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;国外的网站，下载有点慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按照官方的使用，打开Xcode和Injection app，然后在运行Xcode里的项目，之后在点击Injection app菜单里的Inject Source即可。操作就是这么简单，but….&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注入的代码要重新执行才生效，假设你a push b，然后在b里修改了代码并且&lt;code&gt;Inject Source&lt;/code&gt;操作之后，首先从b pop a然后在从a push b里运行的就是你b页面修改后的代码了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果出现&lt;code&gt;Timeout waiting for connection from client app&lt;/code&gt;的问题，请点击菜单&lt;code&gt;macOS Project -&amp;gt; Patch&lt;/code&gt;然后会在项目的&lt;code&gt;main&lt;/code&gt;文件里生成一些&lt;code&gt;DEBUG&lt;/code&gt;代码，之后你再去修改你的代码，然后在进行&lt;code&gt;Inject Source&lt;/code&gt;玩玩吧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其他问题请自行去作者github上提issues。&lt;a href=&quot;https://github.com/johnno1962/InjectionApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/johnno1962/InjectionApp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其次，这个app是不注入get方法的。比如你使用了懒加载，想在get方法里多加一些变量的初始化属性，用这个app就办不到，因此笔者一般采用&lt;code&gt;LLDB&lt;/code&gt;方式在get方法里注入代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先在get方法里打一个断点，然后在&lt;code&gt;LLDB&lt;/code&gt;控制台里输入&lt;code&gt;p&lt;/code&gt;命令即可。之后在键入你要注入的代码，代码输入完之后在连续按两下回车键即可退出&lt;code&gt;LLDB&lt;/code&gt;控制台，然后释放断点就见证神奇的一刻了。&lt;blockquote&gt;
&lt;p&gt;此方法是一次性，也就是说第二次调用这个get方法是不会执行刚那个&lt;code&gt;LLDB&lt;/code&gt;操作里的代码滴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;本篇提升开发效率的动态注入代码就分享到这，如果有更好的方案欢迎联系笔者。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/660127-c2cfbfe9708d3d55.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片来源于网络&quot;&gt;&lt;/p&gt;
&lt;p&gt;简书首发地址:&lt;a href=&quot;http://www.jianshu.com/p/1de7c38490c5&quot;&gt;http://www.jianshu.com/p/1de7c38490c5&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;开发的时候，每次改动代码都要重新&lt;code&gt;run&lt;/code&gt;然后跑一遍app来测试改动代码。那么问题来了，有木有方案就是改完代码不用重新&lt;code&gt;run&lt;/code&gt;就能及时看到效果的呢，答案是&lt;code&gt;YES&lt;/code&gt;。&lt;br&gt;现在解决这一需求的方案网上也不算多，在此笔者特意分享一下笔者使用的工具和方案来提高开发效率。（不讲底层原理，只是纯属的分享一款app）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大神或者已经知道Injection的请绕道，本篇只是纯属分享技巧的文章，只是想让大家提高开发效率而已。&lt;br&gt;
    
    </summary>
    
      <category term="Xcode" scheme="http://xiaopingblog.cn/categories/Xcode/"/>
    
      <category term="Debug" scheme="http://xiaopingblog.cn/categories/Xcode/Debug/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/categories/Xcode/Debug/iOS/"/>
    
    
      <category term="iOS" scheme="http://xiaopingblog.cn/tags/iOS/"/>
    
      <category term="Debug" scheme="http://xiaopingblog.cn/tags/Debug/"/>
    
      <category term="Xcode" scheme="http://xiaopingblog.cn/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptCore的巨坑（JSExportAs方式绑定的本地通信）</title>
    <link href="http://xiaopingblog.cn/2017/01/19/untitled-1484816463595/"/>
    <id>http://xiaopingblog.cn/2017/01/19/untitled-1484816463595/</id>
    <published>2017-01-19T09:01:03.000Z</published>
    <updated>2017-01-19T09:01:55.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇分享的类型不是学习教程，并且要有一点&lt;code&gt;JavaScriptCore&lt;/code&gt;基础。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;毕竟这一块网上一大堆的学习教程，博主就没必要班门弄斧了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇的目的是分享&lt;code&gt;JavaScriptCore&lt;/code&gt;中用&lt;code&gt;JSExport&lt;/code&gt;协议和&lt;code&gt;JSExportAs&lt;/code&gt;宏来进行&lt;code&gt;js&lt;/code&gt;和&lt;code&gt;oc&lt;/code&gt;通信的两个大坑。&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;&lt;li&gt;内存泄露&lt;/li&gt;&lt;br&gt;&lt;li&gt;调用-[JSValue callWithArguments]野指针问题&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;用&lt;code&gt;block&lt;/code&gt;方式来进行js和oc的通信没这两个大坑。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;第一个坑：内存泄露&quot;&gt;&lt;a href=&quot;#第一个坑：内存泄露&quot; class=&quot;headerlink&quot; title=&quot;第一个坑：内存泄露&quot;&gt;&lt;/a&gt;第一个坑：内存泄露&lt;/h1&gt;&lt;p&gt;一般绑定&lt;code&gt;JSContext&lt;/code&gt;里的&lt;code&gt;native&lt;/code&gt;的写法都是&lt;code&gt;self.context[@&amp;quot;native&amp;quot;] = self&lt;/code&gt;。但是这样写会产生内存泄露（泄露原理就是互相持有了），这个坑随便百度Google一下也能找到很多解决方案。目前博主的解决方案是native指定一个新的对象，然后在指定对象里实现JSExport协议。&lt;br&gt;贴上博主在项目里用到的核心代码 :&lt;/p&gt;
&lt;h2 id=&quot;和js通信的控制器页面核心代码&quot;&gt;&lt;a href=&quot;#和js通信的控制器页面核心代码&quot; class=&quot;headerlink&quot; title=&quot;和js通信的控制器页面核心代码&quot;&gt;&lt;/a&gt;和js通信的控制器页面核心代码&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以 JSExport 协议关联 native 的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context[&lt;span class=&quot;string&quot;&gt;@&quot;native&quot;&lt;/span&gt;] = [[NMFormFlowWapNativeManager alloc] initWithDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;NMFormFlowWapNativeManager-h&quot;&gt;&lt;a href=&quot;#NMFormFlowWapNativeManager-h&quot; class=&quot;headerlink&quot; title=&quot;NMFormFlowWapNativeManager.h&quot;&gt;&lt;/a&gt;NMFormFlowWapNativeManager.h&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NMFormFlowWapNativeManager&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithDelegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;NMFormFlowWapNativeManagerDelegate&amp;gt;)delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;NMFormFlowWapNativeManagerDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;NMFormFlowWapNativeManager-m&quot;&gt;&lt;a href=&quot;#NMFormFlowWapNativeManager-m&quot; class=&quot;headerlink&quot; title=&quot;NMFormFlowWapNativeManager.m&quot;&gt;&lt;/a&gt;NMFormFlowWapNativeManager.m&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@import JavaScriptCore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestJSExport&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;JSExport&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSExportAs(nativeCall, - (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)nativeCallHandleWithType:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)nativeType parameter:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)parameter jsType:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)jstype);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NMFormFlowWapNativeManager&lt;/span&gt; () &amp;lt;&lt;span class=&quot;title&quot;&gt;TestJSExport&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NMFormFlowWapNativeManager&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithDelegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;NMFormFlowWapNativeManagerDelegate&amp;gt;)delegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate = delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)nativeCallHandleWithType:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)nativeType parameter:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)parameter jsType:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)jsType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dicParams = [&lt;span class=&quot;built_in&quot;&gt;NSJSONSerialization&lt;/span&gt; JSONObjectWithData:[parameter dataUsingEncoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;] options:&lt;span class=&quot;built_in&quot;&gt;NSJSONReadingMutableLeaves&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate nativeCallHandleWithThread:webThread type:nativeType parameter:dicParams jsType:jsType];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;PS:代码并不是完整的，但最核心的关键已经贴上来了。顺便简单解释一下。由于&lt;code&gt;native&lt;/code&gt;管理的对象交给了另一个，所以在管理者对象里新开了一个代理回调。方便在控制器那边接收得到&lt;code&gt;JS&lt;/code&gt;的事件。只要有点基础的，一看就懂了。毕竟本篇不是学习教程，而是分享坑的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第二个坑：-JSValue-callWithArguments-野指针问题&quot;&gt;&lt;a href=&quot;#第二个坑：-JSValue-callWithArguments-野指针问题&quot; class=&quot;headerlink&quot; title=&quot;第二个坑：-[JSValue callWithArguments]野指针问题&quot;&gt;&lt;/a&gt;第二个坑：-[JSValue callWithArguments]野指针问题&lt;/h1&gt;&lt;p&gt;这个问题有点奇葩，JSValue的callWithArguments就是oc调用js函数所执行的方法。那这简单的函数怎么发生野指针问题尼。&lt;br&gt;那就是oc进行网络请求，请求完回调的时候调用JSValue的callWithArguments的方法就是产生野指针，而且是间接性的，有时候会有时候不会。一旦崩溃基本都直接飞去&lt;code&gt;main&lt;/code&gt;函数了。。。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个问题百度Google都找了许久也没找到类似的问题和解决方案。只是崩溃的时候，左边的堆栈提示&lt;code&gt;webThread&lt;/code&gt;（当时猜测可能是线程间通信影响的此问题），然后我蒙一下切换到&lt;code&gt;webView&lt;/code&gt;的线程里去调用&lt;code&gt;callWithArguments&lt;/code&gt;函数试试，结果就从未发生过崩溃了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;例子：&quot;&gt;&lt;a href=&quot;#例子：&quot; class=&quot;headerlink&quot; title=&quot;例子：&quot;&gt;&lt;/a&gt;例子：&lt;/h2&gt;&lt;p&gt;假设，h5上有一个图片显示和一个&lt;code&gt;button&lt;/code&gt;，点击button的时候，调用本地摄像头并且上传图片到服务器，上传完之后在调用&lt;code&gt;js&lt;/code&gt;一个函数，告诉js图片上传成功，让js去做对应的逻辑。这个时候网络请求完回调里的线程是主线程，调用callWithArguments的时候，就会间接性的崩溃。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;解决办法就是回到&lt;code&gt;webView&lt;/code&gt;的线程去调用&lt;code&gt;callWithArguments&lt;/code&gt;就不会崩溃（因为js和oc绑定的函数，在函数里执行的代码不是在主线程里执行的）。&lt;br&gt;模拟代码：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///假设这个函数是和js的test函数绑定的。如果监听到这个函数就进行网络请求或者上传图片等操作。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//获取webView线程，因为js和oc绑定的函数里执行的代码不是在主线程里。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; *webThread = [&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; currentThread];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//网络请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@weakify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[HTTPRequest requestGetTokenWithFinished:^(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @strongify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//通知js请求完了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//正常情况下是直接在这里调用，但是会间接性发生野指针问题，差不多每隔四五次发生一次野指针。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//JSValue *jsCall = self.context[@&quot;jsCall&quot;];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//[jsCall callWithArguments:nil];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//线程安全的，用此方式，笔者再也没发生过野指针问题。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(jsCall) onThread:webThread withObject:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; waitUntilDone:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)jsCall &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  JSValue *jsCall = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.context[&lt;span class=&quot;string&quot;&gt;@&quot;jsCall&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [jsCall callWithArguments:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;总之笔者分享此文章的主要目的是第二个野指针问题，因为笔者在Google和stackoverflow里也找了很久也找不到问题原因，然后都是蒙对的，所以才来进行分享。可能对于不懂&lt;code&gt;JavaScriptCore&lt;/code&gt;看起来有点困难，总之可以先了解一下。而对于js和oc的通信的业务不复杂的或者使用block进行通信的，应该很难遇到此问题。再者，网上很多学习教程基本都是推荐&lt;code&gt;callWithArguments&lt;/code&gt;在主线程里调用，但目前笔者认为应该还是让它在webView的线程里去执行（那个野指针问题就是在主线程里执行所发生的）。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;callWithArguments&lt;/code&gt;野指针问题的底层实际发生原理也并不是很清楚。所以目前只能说博主是怎么解决的，但是为什么…..博主也不知其然了。有知道的方便的话也可告知一下。&lt;/p&gt;
&lt;p&gt;而对于&lt;code&gt;demo&lt;/code&gt;…..笔者也想写，但对于&lt;code&gt;html、js&lt;/code&gt;并不是很熟悉（顶多看得懂几个标签）。所以….无能为力奉上demo了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇分享的类型不是学习教程，并且要有一点&lt;code&gt;JavaScriptCore&lt;/code&gt;基础。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;毕竟这一块网上一大堆的学习教程，博主就没必要班门弄斧了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇的目的是分享&lt;code&gt;JavaScriptCore&lt;/code&gt;中用&lt;code&gt;JSExport&lt;/code&gt;协议和&lt;code&gt;JSExportAs&lt;/code&gt;宏来进行&lt;code&gt;js&lt;/code&gt;和&lt;code&gt;oc&lt;/code&gt;通信的两个大坑。&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;&lt;li&gt;内存泄露&lt;/li&gt;&lt;br&gt;&lt;li&gt;调用-[JSValue callWithArguments]野指针问题&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;用&lt;code&gt;block&lt;/code&gt;方式来进行js和oc的通信没这两个大坑。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/categories/iOS/"/>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/iOS/All/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>让终端也支持socks5代理协议和git加速</title>
    <link href="http://xiaopingblog.cn/2017/01/05/%E8%AE%A9%E7%BB%88%E7%AB%AF%E4%B9%9F%E6%94%AF%E6%8C%81socks5%E4%BB%A3%E7%90%86%E5%8D%8F%E8%AE%AE%E5%92%8Cgit%E5%8A%A0%E9%80%9F/"/>
    <id>http://xiaopingblog.cn/2017/01/05/让终端也支持socks5代理协议和git加速/</id>
    <published>2017-01-05T14:17:02.000Z</published>
    <updated>2017-01-05T14:23:24.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/660127-0dadb15fb89c004b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;vpn&quot;&gt;&lt;br&gt;首发简书地址：&lt;a href=&quot;http://www.jianshu.com/p/3ed14ca653a1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/3ed14ca653a1&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;身为程序员，在天朝科学的上网，科学的查资料很正常。如果是使用的socks5代理协议来进行科学上网的话，可作为一名iOSer想必知道cocoapods更新和git代码拉取都异常的慢。而这些操作都是在终端里操作，socks5代理协议默认无法让终端也科学的上网。所以笔者来分享一下我在终端里使用socks5科学上网的一些小知识。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;终端支持socks5&quot;&gt;&lt;a href=&quot;#终端支持socks5&quot; class=&quot;headerlink&quot; title=&quot;终端支持socks5&quot;&gt;&lt;/a&gt;终端支持socks5&lt;/h1&gt;&lt;p&gt;笔者分别试过以下两种方式，当然让终端支持socks5协议的方式随意百度一下都很多。当然笔者也去找过，方法太多了也太杂了。以下方法皆是笔者亲测&lt;strong&gt;（mac os环境）&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终端科学上网后，不管git还是使用cocoapods等都要快很多。还有一个好处，那就是使用socks5科学上网，下载国外的资源的时候，并未得到多大的提升（几乎没提升）。而让终端支持了socks5代理协议之后，可以在终端里使用&lt;code&gt;curl -o 文件名 下载地址&lt;/code&gt;来进行国外资源下载，可以得到很大的下载速度的提升（笔者环境是shadowsocks的账号和mac os里亲测的）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-proxychains4&quot;&gt;&lt;a href=&quot;#1-proxychains4&quot; class=&quot;headerlink&quot; title=&quot;1.proxychains4&quot;&gt;&lt;/a&gt;1.proxychains4&lt;/h2&gt;&lt;p&gt;proxychains4的教程网上一大堆，这里不做赘述，不过。。。笔者虽然试了这种方案，但是总感觉没成功。并没得到任何加速&lt;strong&gt;（mac os环境）&lt;/strong&gt;。所以最后并没有用这种方案。&lt;/p&gt;
&lt;h2 id=&quot;2-键入命令。（笔者目前使用方式）&quot;&gt;&lt;a href=&quot;#2-键入命令。（笔者目前使用方式）&quot; class=&quot;headerlink&quot; title=&quot;2.键入命令。（笔者目前使用方式）&quot;&gt;&lt;/a&gt;2.键入命令。（笔者目前使用方式）&lt;/h2&gt;&lt;p&gt;每次打开终端分别输入以下两条命令：&lt;br&gt;export http_proxy=socks5://127.0.0.1:1080&lt;br&gt;export https_proxy=socks5://127.0.0.1:1080&lt;br&gt;然后在终端里使用&lt;code&gt;curl -i http://ip.cn&lt;/code&gt;来查看你当前的&lt;code&gt;ip&lt;/code&gt;地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;code&gt;127.0.0.1:1080&lt;/code&gt;这个地址是写死的。直接复制即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过这有一个弊端，那就是只针对当前终端窗口有效。也就代表，你新开一个终端窗口或者终端关闭了重新打开，是不能正常科学上网的。必须要重新键入以上两条命令才行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; tips:虽然就两条命令，但是每次需要科学上网都要键入两行那么长的字符串还是挺麻烦的。笔者目前是把这两条命令写在了一个&lt;code&gt;txt&lt;/code&gt;文本文件里，每次想要科学上网的时候，就在终端里使用&lt;code&gt;source txt文件&lt;/code&gt;来快速的进行科学上网。&lt;br&gt;比如你把以上两条命令写在了&lt;code&gt;a.txt&lt;/code&gt;文件里，则每次你要科学上网你就打开终端并进入到&lt;code&gt;a.txt&lt;/code&gt;文件的目录里使用&lt;code&gt;source a.txt&lt;/code&gt;即可（或者&lt;code&gt;source a.txt文件的绝对路径&lt;/code&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;git加速&quot;&gt;&lt;a href=&quot;#git加速&quot; class=&quot;headerlink&quot; title=&quot;git加速&quot;&gt;&lt;/a&gt;git加速&lt;/h1&gt;&lt;p&gt;虽然让终端支持socks5协议，而且使用git clone命令也得到了下载速度的提升。但是并不是很理想，有一种方式可以让&lt;code&gt;git clone&lt;/code&gt;更快的下载国外的代码。&lt;/p&gt;
&lt;p&gt;那就是配置&lt;code&gt;git&lt;/code&gt;的&lt;code&gt;http or https&lt;/code&gt;的代理。打开终端并使用以下两条命令进行配置：&lt;br&gt;git config –global http.proxy ‘socks5://127.0.0.1:1080’&lt;br&gt;git config –global https.proxy ‘socks5://127.0.0.1:1080’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;code&gt;127.0.0.1:1080&lt;/code&gt;这个地址是写死的。直接复制即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后的结果测试（分别在终端里使用git克隆了一个仓库，笔者以clone reactivecocoa为例子）：&lt;br&gt;1.终端未科学上网的情况下是每秒四五十kb左右。&lt;br&gt;2.终端科学上网的情况下是每秒两百kb左右。&lt;br&gt;3.配置了git的代理&lt;strong&gt;（git 加速）&lt;/strong&gt;情况下是每秒四五百kb左右。&lt;/p&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h1&gt;&lt;p&gt;笔者是在&lt;code&gt;mac os&lt;/code&gt;下使用并测试的，window系统的不清楚。&lt;br&gt;可以试一下，反正也挺简单的。&lt;br&gt;不管是让终端支持socks5代理协议还是配置了git的代理 ，都一个必要的前提，那就是必须保证你的socks5代理账号是正常并可用状态。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/660127-0dadb15fb89c004b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;vpn&quot;&gt;&lt;br&gt;首发简书地址：&lt;a href=&quot;http://www.jianshu.com/p/3ed14ca653a1&quot;&gt;http://www.jianshu.com/p/3ed14ca653a1&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;身为程序员，在天朝科学的上网，科学的查资料很正常。如果是使用的socks5代理协议来进行科学上网的话，可作为一名iOSer想必知道cocoapods更新和git代码拉取都异常的慢。而这些操作都是在终端里操作，socks5代理协议默认无法让终端也科学的上网。所以笔者来分享一下我在终端里使用socks5科学上网的一些小知识。&lt;br&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
      <category term="VPN" scheme="http://xiaopingblog.cn/categories/All/VPN/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
      <category term="VPN" scheme="http://xiaopingblog.cn/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>我的第一次：Xcode插件开发</title>
    <link href="http://xiaopingblog.cn/2016/06/14/untitled-1465893759257/"/>
    <id>http://xiaopingblog.cn/2016/06/14/untitled-1465893759257/</id>
    <published>2016-06-14T08:42:39.000Z</published>
    <updated>2016-06-22T08:53:19.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://img3.duitang.com/uploads/item/201509/19/20150919211323_Xdcv8.thumb.700_0.jpeg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;关于&lt;code&gt;Xcode&lt;/code&gt;的插件已经层出不穷了。但笔者凭着兴趣也小有研究了一下。&lt;/p&gt;
&lt;p&gt;由于&lt;code&gt;Xcode&lt;/code&gt;的控制台不支持数组和字典里的中文的值输出（更准确的说是输出为&lt;code&gt;Unicode&lt;/code&gt;编码），这让开发者（至少是我）在打印数据进行调试的时候很不方便也很不爽。故此写了一个&lt;code&gt;Category&lt;/code&gt;来解决这个问题（&lt;a href=&quot;https://github.com/biggercoffee/ZXPUnicode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址点此&lt;/a&gt;）。只要把分类拖入到项目里就能让数组和字典里的中文打印正常。&lt;/p&gt;
&lt;p&gt;不过，至少笔者觉得还是挺麻烦的。所以凭着兴趣研究了一下插件开发，并打算把这个小需求整成一个插件。然后装在&lt;code&gt;Xcode&lt;/code&gt;里一劳永逸。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;开发&quot;&gt;&lt;a href=&quot;#开发&quot; class=&quot;headerlink&quot; title=&quot;开发&quot;&gt;&lt;/a&gt;开发&lt;/h1&gt;&lt;p&gt;关于插件开发入门教程网上也有很多。总之大体就是先安装&lt;code&gt;Xcode-Plugin-Template&lt;/code&gt;然后再新建一个&lt;code&gt;project&lt;/code&gt;的时候选择&lt;code&gt;xcode plugin&lt;/code&gt;这样就把插件开发的基本框架给搭好了。（&lt;a href=&quot;https://github.com/kattrali/Xcode-Plugin-Template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode-Plugin-Template传输门&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;但是，插件开发是不开放的，而苹果官方文档也没有。而网上给出大部分建议都是获取所有的通知名，然后根据名字去猜这些通知是做什么的。这样在开发过程中也是很大的阻碍，而我的需求是让控制台把&lt;code&gt;Unicode&lt;/code&gt;编码转成中文，所以我直接去看了别人写的开源，找我需要相关的代码。而核心代码则是参考的&lt;code&gt;MCLog&lt;/code&gt;插件（过滤控制台区域的插件）。&lt;/p&gt;
&lt;p&gt;其中核心代码是叫一个&lt;code&gt;IDEConsoleItem&lt;/code&gt;的类，这个类是每次控制台输出信息的时候调用的，实例化的方法是&lt;code&gt;initWithAdaptorType:content:kind:&lt;/code&gt;。一开始我是写了&lt;code&gt;method_exchangeImplementations&lt;/code&gt;交换实现，然后在切入一套逻辑，根据&lt;code&gt;KVC&lt;/code&gt;取出&lt;code&gt;content&lt;/code&gt;里的内容（控制台的内容），然后在进行&lt;code&gt;Unicode转码&lt;/code&gt;，转码过后的字符串在利用KVC重新赋值&lt;code&gt;content&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;但是…不尽人意，崩溃了。还不知道为什么，然后我尝试了一下&lt;code&gt;method_getImplementation&lt;/code&gt;先把&lt;code&gt;IDEConsoleItem&lt;/code&gt;的&lt;code&gt;initWithAdaptorType:content:kind:&lt;/code&gt;的IMP实现给保存起来，然后在&lt;code&gt;method_setImplementation&lt;/code&gt;重新设置它的IMP，在新的IMP里调用原有IMP，然后在&lt;code&gt;Unicode&lt;/code&gt;转码，既然就没报错了。。。核心参考代码如下：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//保存原有的IMP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I&lt;span class=&quot;built_in&quot;&gt;MP_IDEConsoleItem_initWithAdaptorType&lt;/span&gt; = method_getImplementation(class_getInstanceMethod(&lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;IDEConsoleItem&quot;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(initWithAdaptorType:content:kind:)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置新的IMP    method_setImplementation(class_getInstanceMethod(NSClassFromString(@&quot;IDEConsoleItem&quot;), @selector(initWithAdaptorType:content:kind:)), class_getMethodImplementation([P_ZXP_IDEConsoleItem class], @selector(initWithAdaptorType:content:kind:)));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;IMP代码&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)initWithAdaptorType:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)arg1 content:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)arg2 kind:(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)arg3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; (*execIMP)(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;,SEL,&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)I&lt;span class=&quot;built_in&quot;&gt;MP_IDEConsoleItem_initWithAdaptorType&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; item = execIMP(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, _cmd, arg1, arg2, arg3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (kZXPIsDecodeInConsole) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *logText = [item valueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;content&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *resultText = [ZXPUnicodeDecodePlugsForXcode convertUnicode:logText];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [item setValue:resultText forKey:&lt;span class=&quot;string&quot;&gt;@&quot;content&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;总之目前关于插件开发也没任何知识可分享的，就目前而言，笔者感觉需要实现那些需求，然后找拥有类似需求的插件直接去看源码，比去看通知名字猜想来的更实际一些。如果有关于插件开发这一块的大神指点，我也很乐意受教。最后附上插件（让Xcode支持中文的输出）地址以供学习，代码很简单，就一百行左右的代码&lt;a href=&quot;https://github.com/biggercoffee/ZXPUnicodeDecodePlugsForXcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/biggercoffee/ZXPUnicodeDecodePlugsForXcode&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://img3.duitang.com/uploads/item/201509/19/20150919211323_Xdcv8.thumb.700_0.jpeg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;关于&lt;code&gt;Xcode&lt;/code&gt;的插件已经层出不穷了。但笔者凭着兴趣也小有研究了一下。&lt;/p&gt;
&lt;p&gt;由于&lt;code&gt;Xcode&lt;/code&gt;的控制台不支持数组和字典里的中文的值输出（更准确的说是输出为&lt;code&gt;Unicode&lt;/code&gt;编码），这让开发者（至少是我）在打印数据进行调试的时候很不方便也很不爽。故此写了一个&lt;code&gt;Category&lt;/code&gt;来解决这个问题（&lt;a href=&quot;https://github.com/biggercoffee/ZXPUnicode&quot;&gt;github地址点此&lt;/a&gt;）。只要把分类拖入到项目里就能让数组和字典里的中文打印正常。&lt;/p&gt;
&lt;p&gt;不过，至少笔者觉得还是挺麻烦的。所以凭着兴趣研究了一下插件开发，并打算把这个小需求整成一个插件。然后装在&lt;code&gt;Xcode&lt;/code&gt;里一劳永逸。&lt;br&gt;
    
    </summary>
    
      <category term="Xcode" scheme="http://xiaopingblog.cn/categories/Xcode/"/>
    
      <category term="插件" scheme="http://xiaopingblog.cn/categories/Xcode/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="Xcode" scheme="http://xiaopingblog.cn/tags/Xcode/"/>
    
      <category term="插件" scheme="http://xiaopingblog.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>（技巧分享）老生常谈的符号断点 for Xcode ，找出你想要的ViewController</title>
    <link href="http://xiaopingblog.cn/2016/06/06/untitled-1463582900511/"/>
    <id>http://xiaopingblog.cn/2016/06/06/untitled-1463582900511/</id>
    <published>2016-06-06T06:16:52.000Z</published>
    <updated>2016-06-06T06:19:10.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.bz55.com/uploads/allimg/130521/1-130521100358.jpg&quot; alt=&quot;小清新&quot;&gt;&lt;/p&gt;
&lt;p&gt;Xcode中的&lt;code&gt;符号断点(Symbolic breakpoint)&lt;/code&gt;可以针对某一个方法设置断点并暂停执行（如不懂符号断点的小伙伴们网上随便一搜都能入门了）。因此我们可以利用这特性，维护项目的时候可以不用看源代码直接运行APP就能快速的了解到当前所运行的页面是属于哪一个&lt;code&gt;ViewController&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本技巧需了解符号断点，本篇只是利用此特性来总结的一个开发技巧分享。所以不涉及到断点这一块的知识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;p&gt;既然我们知道&lt;code&gt;符号断点(Symbolic breakpoint)&lt;/code&gt;可以让某一个函数暂停，而我们的&lt;code&gt;ViewController&lt;/code&gt;几乎都有实现&lt;code&gt;viewDidLoad&lt;/code&gt;方法（没实现的我还没真没碰到过。。。），然而每进入一个页面都会调用&lt;code&gt;viewDidLoad&lt;/code&gt;函数，因此我们就打一个符号断点让它暂停在&lt;code&gt;UIViewController&lt;/code&gt;的&lt;code&gt;viewDidLoad&lt;/code&gt;方法，然后每次进入到APP的页面就可以在我们的&lt;code&gt;Xcode&lt;/code&gt;的左侧堆栈一栏看到调用顺序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;断点设置GIF图如下：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrn7f.com1.z0.glb.clouddn.com/16-6-6/91157485.jpg&quot; alt=&quot;断点设置GIF图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;左侧堆栈示例图如下：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xrn7f.com1.z0.glb.clouddn.com/16-6-6/57214399.jpg&quot; alt=&quot;左侧堆栈示例图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最下面那个黑色的类名就是我们APP页面显示所对应的ViewController&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h1&gt;&lt;p&gt;虽然以上步骤是实现了我们的需求，but…每次要找一个页面是属于哪一个&lt;code&gt;ViewController&lt;/code&gt;的时候，都会在&lt;code&gt;xcode&lt;/code&gt;里暂停，而且还要在左侧栏的堆栈，而且重点还是每次我显示一个页面他都要执行这个符号断点并且暂停在&lt;code&gt;Xcode&lt;/code&gt;里（虽然可以禁止断点，当需要使用的时候在打开，但笔者觉得还是略麻烦）。&lt;/p&gt;
&lt;p&gt;so… 笔者觉得把断点加在&lt;code&gt;BaseViewController&lt;/code&gt;里，然后我们让断点的&lt;code&gt;automatically continue after evaluating actions&lt;/code&gt;选项勾上，这样它就会安安静静的执行不会暂停了。然后我们在断点里添加一个&lt;code&gt;debug&lt;/code&gt;命令，命令为&lt;code&gt;po self&lt;/code&gt;把当前的&lt;code&gt;ViewController&lt;/code&gt;打印在控制台即可（如下示例图）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrn7f.com1.z0.glb.clouddn.com/16-6-6/81082574.jpg&quot; alt=&quot;示例图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数项目里的&lt;code&gt;ViewController&lt;/code&gt;都是继承自&lt;code&gt;BaseViewController&lt;/code&gt;，而&lt;code&gt;BaseViewController&lt;/code&gt;又是继承与&lt;code&gt;UIViewController&lt;/code&gt;的。而上面的示例图里的&lt;code&gt;NMBaseViewController&lt;/code&gt;就是我们项目的&lt;code&gt;BaseViewController&lt;/code&gt;。所以把符号断点设置到&lt;code&gt;NMBaseViewController&lt;/code&gt;即可，至于为什么不设置到&lt;code&gt;UIViewController&lt;/code&gt;，那是因为在控制台里使用&lt;code&gt;po&lt;/code&gt;命令找不到&lt;code&gt;self&lt;/code&gt;这个标志。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;只是根据个人经验总结出来的一个小技巧，个人觉得用处还是蛮大的。因为当你在维护项目的时候，有时候要修改某一个页面的东西往往要先找到这个页面所对应的&lt;code&gt;Controller&lt;/code&gt;，如果纯属的去看代码追踪流程来得知某一页面是属于哪一个&lt;code&gt;Controller&lt;/code&gt;，工作量必然很大。而且一个项目稍微偏大点，有时候自己写过的东西都忘了那个页面所对应的&lt;code&gt;Controller&lt;/code&gt;叫什么名字了。。所以用这个小技巧能快速定位到页面所对应的&lt;code&gt;Controller&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然如果有更好的技巧也欢迎告知，以上纯属笔者个人经验分享。如需转载请注明原文地址。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.bz55.com/uploads/allimg/130521/1-130521100358.jpg&quot; alt=&quot;小清新&quot;&gt;&lt;/p&gt;
&lt;p&gt;Xcode中的&lt;code&gt;符号断点(Symbolic breakpoint)&lt;/code&gt;可以针对某一个方法设置断点并暂停执行（如不懂符号断点的小伙伴们网上随便一搜都能入门了）。因此我们可以利用这特性，维护项目的时候可以不用看源代码直接运行APP就能快速的了解到当前所运行的页面是属于哪一个&lt;code&gt;ViewController&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本技巧需了解符号断点，本篇只是利用此特性来总结的一个开发技巧分享。所以不涉及到断点这一块的知识。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/categories/All/iOS/"/>
    
      <category term="Debug" scheme="http://xiaopingblog.cn/categories/All/iOS/Debug/"/>
    
      <category term="Xcode" scheme="http://xiaopingblog.cn/categories/All/iOS/Debug/Xcode/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/tags/iOS/"/>
    
      <category term="Debug" scheme="http://xiaopingblog.cn/tags/Debug/"/>
    
      <category term="Xcode" scheme="http://xiaopingblog.cn/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>runtime从入门到放弃</title>
    <link href="http://xiaopingblog.cn/2016/05/06/runtime%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>http://xiaopingblog.cn/2016/05/06/runtime从入门到放弃/</id>
    <published>2016-05-06T07:00:00.000Z</published>
    <updated>2016-05-06T07:12:39.000Z</updated>
    
    <content type="html">&lt;p&gt;本篇福利，用美女来抛砖引玉。&lt;br&gt;&lt;img src=&quot;http://i4.piimg.com/7dae777f250c4799.jpg&quot; alt=&quot;来点福利&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;GG-背景&quot;&gt;&lt;a href=&quot;#GG-背景&quot; class=&quot;headerlink&quot; title=&quot;GG 背景&quot;&gt;&lt;/a&gt;GG 背景&lt;/h1&gt;&lt;p&gt;本篇不适应&lt;code&gt;runtime&lt;/code&gt;学习，也不涉及&lt;code&gt;runtime&lt;/code&gt;长篇大论的理论知识。本篇只是想让你适当的学会放手。而所谓的入门到放弃中的&lt;code&gt;入门&lt;/code&gt;则是一些&lt;code&gt;runtime&lt;/code&gt;常用&lt;code&gt;apis&lt;/code&gt;的认识和使用场景（笔者工作总结）。而所谓的放弃就是不要太过于执着&lt;code&gt;runtime&lt;/code&gt;，其实它并没有你想象中的那么好。&lt;/p&gt;
&lt;h1 id=&quot;来嗨起来&quot;&gt;&lt;a href=&quot;#来嗨起来&quot; class=&quot;headerlink&quot; title=&quot;来嗨起来&quot;&gt;&lt;/a&gt;来嗨起来&lt;/h1&gt;&lt;p&gt;现在就让我们开始来旅游&lt;code&gt;runtime&lt;/code&gt;的世界吧~！&lt;/p&gt;
&lt;h2 id=&quot;关联&quot;&gt;&lt;a href=&quot;#关联&quot; class=&quot;headerlink&quot; title=&quot;关联&quot;&gt;&lt;/a&gt;关联&lt;/h2&gt;&lt;p&gt;&lt;code&gt;objc_setAssociatedObject&lt;/code&gt; 关联，懂点&lt;code&gt;runtime&lt;/code&gt;或者不懂&lt;code&gt;runtime&lt;/code&gt;的应该都知道这个家伙吧。再或者在分类里也应该见过不少了吧。不讲它用法，只分享笔者经历。&lt;/p&gt;
&lt;p&gt;关联的用处一般是用来在分类里定义属性，分别在属性的&lt;code&gt;set&lt;/code&gt;和&lt;code&gt;get&lt;/code&gt;方法里存放或者获取属性的值。当然还有一个用处也比较实用，则是强引用自己，并且不要释放。&lt;/p&gt;
&lt;p&gt;强引用自己？嗯哼？怎么有一点晕晕的。好吧，举个列子。&lt;/p&gt;
&lt;p&gt;需求（可忽略）：&lt;/p&gt;
&lt;p&gt;比如你有一个&lt;code&gt;ZXPAAA&lt;/code&gt;的&lt;code&gt;class&lt;/code&gt;，然后&lt;code&gt;ZXPAAA&lt;/code&gt;里有&lt;code&gt;show&lt;/code&gt;和&lt;code&gt;dismiss&lt;/code&gt;方法，并且还有一个&lt;code&gt;delegate&lt;/code&gt;回调。然后你还有一个&lt;code&gt;ZXPBBB&lt;/code&gt;的&lt;code&gt;class&lt;/code&gt;并且有一个函数叫&lt;code&gt;test&lt;/code&gt;。现在&lt;code&gt;test&lt;/code&gt;函数里有一个局部自动变量&lt;code&gt;ZXPAAA&lt;/code&gt;的实例，并且调用&lt;code&gt;ZXPAAA的show&lt;/code&gt;方法来弹出一个视图。&lt;/p&gt;
&lt;p&gt;那么问题来了，这时候你在&lt;code&gt;ZXPBBB的test方法&lt;/code&gt;里设置&lt;code&gt;ZXPAAA&lt;/code&gt;的delegate为&lt;code&gt;self&lt;/code&gt;（self=ZXPBBB）的时候，因为&lt;code&gt;ZXPAAA&lt;/code&gt;是局部自动变量，所以在&lt;code&gt;test&lt;/code&gt;函数执行完之前，函数内部的&lt;code&gt;ZXPAAA&lt;/code&gt;实例变量的引用计数会减一，由于你只是实例化了一下，引用计数为一，然后在减一，故此，此变量会释放，然后在这时候你遵守的&lt;code&gt;ZXPAAA&lt;/code&gt;的delegate方法永远不会回调。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决：&lt;/strong&gt; 那么这时候你就可以在&lt;code&gt;ZXPAAA&lt;/code&gt;里的&lt;code&gt;show&lt;/code&gt;方法用objc_setAssociatedObject来关联自己并设置&lt;code&gt;retain&lt;/code&gt;引用+1。让self不会释放，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ZXPAAA的show 方法里，关联自己，会引用计数+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, key, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_RETAIN_NONATOMIC&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;目前为止确实是解决了对象自动释放的问题，可问题是对象一直存在呀。内存泄露了尼。不用怕，我们在ZXPAAA的dismiss 方法里释放关联就行了。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ZXPAAA的dismiss 方法里，从关联里移除，设置为nil,会引用计数-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, key, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_ASSIGN&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/biggercoffee/ZXPPickerView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;之前简单封装了一个pickerView工具类里面有用到类似场景，点此进行传输进行查看。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i4.piimg.com/dcf0eb7370dfa216.jpg&quot; alt=&quot;乐一乐&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;获取class的所有方法（包含私有）&quot;&gt;&lt;a href=&quot;#获取class的所有方法（包含私有）&quot; class=&quot;headerlink&quot; title=&quot;获取class的所有方法（包含私有）&quot;&gt;&lt;/a&gt;获取class的所有方法（包含私有）&lt;/h2&gt;&lt;p&gt;核心方法是&lt;code&gt;class_copyMethodList&lt;/code&gt;，直接贴代码：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uint count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回值是一个Method指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method *methodList = class_copyMethodList([&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; class], &amp;amp;count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(method_getName(methodList[i])));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    free(methodList);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上这串代码，看似很牛逼。。其实用一句话来形容就是&lt;code&gt;just so so&lt;/code&gt;而已。其实最主要的是并没有任何一点实际用处。就算知道了很多私有方法，你想去完美的运用它也需要很多时间成本，而且&lt;code&gt;app store&lt;/code&gt;还不会给你上线(企业发布除外)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：更多用法直接去查看.h文件即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;获取class的所有变量（包含私有）&quot;&gt;&lt;a href=&quot;#获取class的所有变量（包含私有）&quot; class=&quot;headerlink&quot; title=&quot;获取class的所有变量（包含私有）&quot;&gt;&lt;/a&gt;获取class的所有变量（包含私有）&lt;/h2&gt;&lt;p&gt;核心方法是&lt;code&gt;class_copyIvarList&lt;/code&gt;，直接贴代码：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uint count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回值是一个Ivar指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ivar *ivarList = class_copyIvarList([&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; class], &amp;amp;count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%s&quot;&lt;/span&gt;,ivar_getName(ivarList[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    free(ivarList);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取变量和获取方法同理，然并卵，但作为兴趣研究研究的话，还是可以玩玩的。在工程里的实际用处也并不大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：更多用法直接去查看.h文件即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;方法替换&quot;&gt;&lt;a href=&quot;#方法替换&quot; class=&quot;headerlink&quot; title=&quot;方法替换&quot;&gt;&lt;/a&gt;方法替换&lt;/h2&gt;&lt;p&gt;API为&lt;code&gt;method_exchangeImplementations&lt;/code&gt;，交换两个方法的实现，一般用来进行黑魔法调试。虽然也可以用来实现AOP切面编程，but…工程里千万慎用，千万慎用，千万慎用。重要的事情说三遍，至于为什么，原因很简单，不好维护，出了错都不知道飞哪儿去了。而要实现方法切面可使用开源的&lt;code&gt;Aspects&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 所谓的黑魔法调试，比如替换init方法，并打印一句话，方便我们知道哪些class被初始化，而AOP切面编程的概念网上也有很多，随意百度一下即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;其他还有很多，比如&lt;code&gt;objc_copyClassList&lt;/code&gt;获取所有class，&lt;code&gt;method_setImplementation&lt;/code&gt;给方法重置一个IMP等等。关于runtime的API有点太多了，就不一一列举了。当然关于runtime知识点远不止这些api这么简单，比如消息转发，重定向等等。&lt;/p&gt;
&lt;h1 id=&quot;写在最后&quot;&gt;&lt;a href=&quot;#写在最后&quot; class=&quot;headerlink&quot; title=&quot;写在最后&quot;&gt;&lt;/a&gt;写在最后&lt;/h1&gt;&lt;p&gt;but…. runtime有这么多的api，到底有什么用？答案是并没什么卵用，对，虽然没卵用，但还是很重要，不要问我为什么，就因为它是OC底层，核心。作为一位iOSer，了解这些基础是必须的，起码装逼也有了资本。再退一万步来讲，对于面试，这些也会派上用场。不过对于工作中，确实没啥太大的用处，但是如果写框架的话，用处还是特别大，而且作为程序员也不能一直停留在应用层层面。&lt;/p&gt;
&lt;p&gt;当然，在工作中用的并不怎么多，但是，还是必须要学的。而标题所谓的放弃的寓意是，让你不要太过于纠结runtime到底有什么用。因为也有很多新人问过笔者runtime到底能做什么….况且现在关于这方面的资料也不多。资料查来查去无非就是消息转发，重定向还有那几个获取变量、方法等几个常用的API而已。当然，对于runtime笔者也连门都没有入。。在此笔者建议新人们一直捉摸不透runtime到底能做什么，倒不如花花时间去研究一下GCD，core foundation等。&lt;/p&gt;
&lt;p&gt;以上纯属笔者个人给新人的一些建议以及一些runtime肤浅的用法。&lt;br&gt;欢迎吐槽，请勿喷贴。。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转载请注明原文出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://i4.piimg.com/a48affaa13187bf8.jpg&quot; alt=&quot;最近很流行的&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本篇福利，用美女来抛砖引玉。&lt;br&gt;&lt;img src=&quot;http://i4.piimg.com/7dae777f250c4799.jpg&quot; alt=&quot;来点福利&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/categories/All/iOS/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>一个妹子要到了程序员前辈的社交账号</title>
    <link href="http://xiaopingblog.cn/2016/05/04/%E4%B8%80%E4%B8%AA%E5%A6%B9%E5%AD%90%E8%A6%81%E5%88%B0%E4%BA%86%E7%A8%8B%E5%BA%8F%E5%91%98%E5%89%8D%E8%BE%88%E7%9A%84%E7%A4%BE%E4%BA%A4%E8%B4%A6%E5%8F%B7/"/>
    <id>http://xiaopingblog.cn/2016/05/04/一个妹子要到了程序员前辈的社交账号/</id>
    <published>2016-05-04T01:28:58.000Z</published>
    <updated>2016-05-04T01:30:18.000Z</updated>
    
    <content type="html">&lt;p&gt;程序员漫画，挺有意思的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-76537a5f3e2142cb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/138a2e59eea5#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;程序员漫画，挺有意思的。&lt;/p&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
      <category term="漫画" scheme="http://xiaopingblog.cn/categories/All/%E6%BC%AB%E7%94%BB/"/>
    
      <category term="转载" scheme="http://xiaopingblog.cn/categories/All/%E6%BC%AB%E7%94%BB/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
      <category term="漫画" scheme="http://xiaopingblog.cn/tags/%E6%BC%AB%E7%94%BB/"/>
    
      <category term="转载" scheme="http://xiaopingblog.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>鸡助又没卵用的APIS for ios</title>
    <link href="http://xiaopingblog.cn/2016/04/24/untitled-1461463524398/"/>
    <id>http://xiaopingblog.cn/2016/04/24/untitled-1461463524398/</id>
    <published>2016-04-24T02:05:24.000Z</published>
    <updated>2016-05-03T07:21:04.000Z</updated>
    
    <content type="html">&lt;p&gt;　好玩的一些APIS：那些简单又容易被忽略的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;纯属记个笔记方便笔者查阅，因为笔者感觉这几个api有点意思而又不常用也容易被忽略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;禁止进入休眠&quot;&gt;&lt;a href=&quot;#禁止进入休眠&quot; class=&quot;headerlink&quot; title=&quot;禁止进入休眠&quot;&gt;&lt;/a&gt;禁止进入休眠&lt;/h1&gt;&lt;p&gt;iPhone为了节省电力所以有一个自动休眠机制，如果想让我们的APP不自动进入休眠只需要设置&lt;code&gt;UIApplication的idleTimerDisabled&lt;/code&gt;属性为&lt;code&gt;YES&lt;/code&gt;即可。（切勿滥用）&lt;br&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[UIApplication sharedApplication].idleTimerDisabled = YES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;接近传感器&quot;&gt;&lt;a href=&quot;#接近传感器&quot; class=&quot;headerlink&quot; title=&quot;接近传感器&quot;&gt;&lt;/a&gt;接近传感器&lt;/h1&gt;&lt;p&gt;iPhone内置了接近传感器功能，比如当您手机通话使用中将手机靠近耳边时，iPhone画面是自动关闭，拿出耳边时，画面自动显示。&lt;/p&gt;
&lt;p&gt;如果我们想在APP中实现这个需求只需要一行代码即可。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[UIDevice currentDevice].proximityMonitoringEnabled = YES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果想要对接近传感器进行监听可添加一个通知。通知名为&lt;code&gt;UIDeviceProximityStateDidChangeNotification&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在通知的监听方法里根据接近传感器改变的状态进行相关处理，如下代码可获取状态。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[UIDevice currentDevice].proximityState&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YES：画面关闭&lt;br&gt;NO：画面显示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;获取电池相关信息&quot;&gt;&lt;a href=&quot;#获取电池相关信息&quot; class=&quot;headerlink&quot; title=&quot;获取电池相关信息&quot;&gt;&lt;/a&gt;获取电池相关信息&lt;/h1&gt;&lt;p&gt;想要获取电池相关信息首先先调用&lt;code&gt;UIDevice&lt;/code&gt;类的&lt;code&gt;batteryMonitoringEnabled&lt;/code&gt;为YES监听电池。&lt;/p&gt;
&lt;p&gt;电量获取调用&lt;code&gt;UIDevice&lt;/code&gt;类的&lt;code&gt;batteryLevel&lt;/code&gt;。&lt;br&gt;电池充电状态获取调用&lt;code&gt;UIDevice&lt;/code&gt;类的&lt;code&gt;batteryState&lt;/code&gt;。（返回的是一个枚举，枚举顾名思义自己去看）&lt;br&gt;示例代码&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//电池相关信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//开始监听&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;UIDevice&lt;/span&gt; currentDevice].batteryMonitoringEnabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//状态获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%zi&quot;&lt;/span&gt;,[&lt;span class=&quot;built_in&quot;&gt;UIDevice&lt;/span&gt; currentDevice].batteryState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//电池电量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%f&quot;&lt;/span&gt;,[&lt;span class=&quot;built_in&quot;&gt;UIDevice&lt;/span&gt; currentDevice].batteryLevel);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以在通知中注册&lt;code&gt;UIDeviceBatteryStateDidChangeNotification&lt;/code&gt;和&lt;code&gt;UIDeviceBatteryLevelDidChangeNotification&lt;/code&gt;监听电池的状态与电量的改变，并进行相关处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS:其他UIDevice类的什么name呀model呀identifierForVendor那些谁都知道的属性就不赘述了。只是感觉上面几个API有点意思又容易被遗忘做个笔记而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;剪贴板&quot;&gt;&lt;a href=&quot;#剪贴板&quot; class=&quot;headerlink&quot; title=&quot;剪贴板&quot;&gt;&lt;/a&gt;剪贴板&lt;/h1&gt;&lt;p&gt;剪贴板，一个不常用的class&lt;br&gt;iOS里有一个copy与paste的功能（就是长按出现的那个复制粘贴），而UIPasteboard可以获取或者设置paste里的值（看类名都知道了）。如下代码&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置粘贴内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;UIPasteboard&lt;/span&gt; generalPasteboard].string = &lt;span class=&quot;string&quot;&gt;@&quot;string&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取粘贴内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *string = [&lt;span class=&quot;built_in&quot;&gt;UIPasteboard&lt;/span&gt; generalPasteboard].string;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;欲知更多UIPasteboard相关API请自行阅读文档，谢谢合作。（不过笔者感觉先能用上以上两个API再说吧。233..）&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　好玩的一些APIS：那些简单又容易被忽略的。&lt;br&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/categories/All/iOS/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
      <category term="iOS" scheme="http://xiaopingblog.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>程序员跳槽的9大理由【漫画】</title>
    <link href="http://xiaopingblog.cn/2016/04/19/untitled-1461057063065/"/>
    <id>http://xiaopingblog.cn/2016/04/19/untitled-1461057063065/</id>
    <published>2016-04-19T09:11:03.000Z</published>
    <updated>2016-05-03T07:21:37.000Z</updated>
    
    <content type="html">&lt;p&gt;　&amp;gt; 此篇为转载漫画，挺有意思的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-4d90a1c3506c37e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-63a92b6b8bf0fb46.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-023f101d9829918f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-c366407fd975fc6c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-c19a7eaa3bb73085.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-0017a1c48aea4316.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-cfe658b0dc449a27.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-16cd2a315a910e2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/297062-f9d3837421a94ca3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/c3d858efd0ee#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址点此&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　&amp;gt; 此篇为转载漫画，挺有意思的。&lt;br&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
      <category term="Programe Life" scheme="http://xiaopingblog.cn/categories/All/Programe-Life/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
      <category term="Programe Life" scheme="http://xiaopingblog.cn/tags/Programe-Life/"/>
    
  </entry>
  
  <entry>
    <title>我的博客是如何搭建的（github pages + HEXO + 域名绑定）</title>
    <link href="http://xiaopingblog.cn/2016/04/08/untitled-1460084538799/"/>
    <id>http://xiaopingblog.cn/2016/04/08/untitled-1460084538799/</id>
    <published>2016-04-08T03:02:18.000Z</published>
    <updated>2016-05-03T07:21:45.000Z</updated>
    
    <content type="html">&lt;p&gt;博客搭建好之后，貌似很久没有写文章了，现在就来分享一下我搭建博客的艰苦行程和一些莫名其妙的坑。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps:本博客是在&lt;code&gt;MAC&lt;/code&gt;环境下进行搭建的，并且对github pages和一些&lt;code&gt;shell&lt;/code&gt;脚本知识有所了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先简单描述一下搭建的大体流程吧（其实挺简单的，只是体力活费时而已）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拥有一个&lt;code&gt;github pages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在本地电脑里配置&lt;code&gt;hexo&lt;/code&gt;的环境。（ &lt;code&gt;hexo&lt;/code&gt;与&lt;code&gt;github pages&lt;/code&gt;绑定，写博文修改博文等，生成静态博客并&lt;code&gt;push to github&lt;/code&gt;。)&lt;/li&gt;
&lt;li&gt;绑定自己的域名（也可以不用绑定，&lt;code&gt;github pages&lt;/code&gt;有二级域名，只不过绑定了一个属于自己的域名更有逼格点儿。）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Github-Pages-（第一步）&quot;&gt;&lt;a href=&quot;#Github-Pages-（第一步）&quot; class=&quot;headerlink&quot; title=&quot;Github Pages （第一步）&quot;&gt;&lt;/a&gt;Github Pages （第一步）&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Github Pages&lt;/code&gt;免费的静态站点，其特点：免费托管、自带主题、支持自制页面等。&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;Github Pages&lt;/code&gt;比较简单，只要你有一个github账号在创建一个仓库就行了，但是这个仓库是有规则的，其格式必须为：&lt;code&gt;yourusername.github.io&lt;/code&gt;。然后根据提示一直下一步即可，非常简单。&lt;br&gt;&lt;img src=&quot;/images/1460086313046.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为一个开发者，要是连一个github账号都没有，那你可以洗洗睡了。&lt;/p&gt;
&lt;p&gt;而仓库命名格式中的&lt;code&gt;yourusername&lt;/code&gt;是你的github用户名。笔者的github用户名是&lt;code&gt;biggercoffee&lt;/code&gt;。所以仓库命名格式则是&lt;code&gt;biggercoffee.github.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于笔者有&lt;code&gt;biggercoffee.github.io&lt;/code&gt;这个仓库，所以我上述效果图提示已存在。纯属作为演示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Hexo-（第二步）&quot;&gt;&lt;a href=&quot;#Hexo-（第二步）&quot; class=&quot;headerlink&quot; title=&quot;Hexo （第二步）&quot;&gt;&lt;/a&gt;Hexo （第二步）&lt;/h1&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;的安装网上有很多教程，但很多都很蛋疼且过期技术，所以最好的还是参考&lt;code&gt;Hexo&lt;/code&gt;官方的安装教程来一步一步走。在此笔者也不写详细教程了，因为可能不出2个月就坑了小伙伴们。&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文版Hexo文档点此进行传送。。。&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地环境说白了就是要有&lt;code&gt;Git&lt;/code&gt;和&lt;code&gt;Node.js&lt;/code&gt;环境即可。详情参见官网文档为准，也最好参考官网，避免入坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;建站&quot;&gt;&lt;a href=&quot;#建站&quot; class=&quot;headerlink&quot; title=&quot;建站&quot;&gt;&lt;/a&gt;建站&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;安装好了之后，就开始进行建站。打开终端&lt;code&gt;cd&lt;/code&gt;到桌面并使用如下命令即可建好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo init &lt;code&gt;yourname&lt;/code&gt;&lt;br&gt;cd &lt;code&gt;yourname&lt;/code&gt;&lt;br&gt;npm install&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中&lt;code&gt;yourname&lt;/code&gt;是你的文件夹名字可随意取（本文章假设&lt;code&gt;yourname&lt;/code&gt;的文件夹名称是&lt;code&gt;Hexo&lt;/code&gt;）。&lt;br&gt;建站好了之后需要了解更多的信息和其他步骤请参考官网的这篇文档。&lt;a href=&quot;https://hexo.io/zh-cn/docs/setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/docs/setup.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里需要特别提一下，官方的文档里并没讲解如何配置与&lt;code&gt;Github pages&lt;/code&gt;进行关联，在此特意说一下配置信息。进入到你的站点（使用hexo init yourname命令时，这里的yourname文件夹目录，刚假设yourname是Hexo，所以我们进入Hexo目录），然后以文本编辑器打开&lt;code&gt;_config.yml&lt;/code&gt;文件，并滚动到最下面添加如下配置信息（注意最下边有&lt;code&gt;deploy&lt;/code&gt;和&lt;code&gt;type&lt;/code&gt;字段，覆盖这两个字段或者删除这两个字段然后复制下面的四个字段也行。）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; deploy:&lt;br&gt;   type: git&lt;br&gt;   repo: &lt;a href=&quot;https://github.com/biggercoffee/biggercoffee.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/biggercoffee/biggercoffee.github.io.git&lt;/a&gt;&lt;br&gt;  branch: master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把其中&lt;code&gt;repo&lt;/code&gt;字段的值替换成你的&lt;code&gt;github pages&lt;/code&gt;提交代码的git地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;别告诉我你不知道你的github pages的git提交地址。。。&lt;br&gt;好吧，我还是附上一张截图吧，进入到你的github刚创建好的那个&lt;code&gt;github pages&lt;/code&gt;仓库就能看到了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/1460096862397.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;好吧，到此你使用终端，然后进入到你的站点文件夹使用&lt;code&gt;hexo s&lt;/code&gt;命令，如果成功会打印类似&lt;code&gt;Hexo is running at http://localhost:4000/. Press Ctrl+C to stop&lt;/code&gt;的一句话，再打开你的浏览器输入&lt;code&gt;localhost:4000&lt;/code&gt;地址见证神奇的一刻吧。&lt;/p&gt;
&lt;h2 id=&quot;发布&quot;&gt;&lt;a href=&quot;#发布&quot; class=&quot;headerlink&quot; title=&quot;发布&quot;&gt;&lt;/a&gt;发布&lt;/h2&gt;&lt;p&gt;当然这只是本地跑起来了，而你的github pages服务器上并没有，所以你就需要在你的站点里使用终端命令进行发布：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo clean&lt;br&gt;hexo g&lt;br&gt;hexo d&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令详解，第一条是清楚缓存，第二条命令是生成本地发布文件夹，第三条命令才是最后的发布到&lt;code&gt;github pages&lt;/code&gt;上。更多的&lt;code&gt;hexo&lt;/code&gt;命令操作请参考官方文档即可。不过一般用来用去无非就是创建页面、发布这么几条命令而已。&lt;a href=&quot;https://hexo.io/zh-cn/docs/commands.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo官方命令参考文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实学习一个新东西有事没事多去官方看文档，比在网上查资料要来的更靠谱的多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;HEXO主题&quot;&gt;&lt;a href=&quot;#HEXO主题&quot; class=&quot;headerlink&quot; title=&quot;HEXO主题&quot;&gt;&lt;/a&gt;HEXO主题&lt;/h2&gt;&lt;p&gt;如果你到了这里没有任何问题，那么恭喜你已经成功了，不过这才刚刚开始。&lt;br&gt;当你成功的看到自己博客搭建好的那一刻又是激动又是失望，激动的是博客总算折腾出来了，失望的是，为何如此的丑。。。说实话Hexo默认的主题自我感觉还过得去，如果你想换风格,&lt;code&gt;Hexo&lt;/code&gt;的主题网上随便一搜也有很多。在此笔者使用的博客主题是&lt;code&gt;Next&lt;/code&gt;（国人写的）。&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iissnan/hexo-theme-next&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Next文档已经写得很详细了（上述链接里有文档地址），笔者在此也没啥要写的。只不过弱弱的吐槽一下，配置这东西需要注册的账号挺多的。。。但扩展性很强，需要什么功能自己去配置一下即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;域名绑定（第三步，可选）&quot;&gt;&lt;a href=&quot;#域名绑定（第三步，可选）&quot; class=&quot;headerlink&quot; title=&quot;域名绑定（第三步，可选）&quot;&gt;&lt;/a&gt;域名绑定（第三步，可选）&lt;/h1&gt;&lt;p&gt;笔者是在万网买的域名（&lt;a href=&quot;http://xiaopingblog.cn/）。&quot;&gt;http://xiaopingblog.cn/）。&lt;/a&gt; 域名买好之后提交实名认证等，这些操作就不在赘述。域名购买地址&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wanwang.aliyun.com/&lt;/a&gt;。 &lt;/p&gt;
&lt;p&gt;这里需要特别提一下的就是万网如何与&lt;code&gt;github pages&lt;/code&gt;进行绑定，首先假设你有一个域名并且是可用状态。修改你域名的&lt;code&gt;DNS&lt;/code&gt;地址为 &lt;code&gt;f1g1ns1.dnspod.net&lt;/code&gt;和&lt;code&gt;f1g1ns2.dnspod.net&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/1460101238056.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后在你的本地站点目录里的&lt;code&gt;source&lt;/code&gt;目录下添加一个&lt;code&gt;CNAME&lt;/code&gt;文件，不带后缀，效果如下&lt;br&gt;&lt;img src=&quot;/images/1460101362486.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;以文本编辑器打开&lt;code&gt;CNAME&lt;/code&gt;，里面添加你的域名信息（不加http://） 如下图&lt;br&gt;&lt;img src=&quot;/images/1460101466955.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;填写完了之后再重新部署到github pages上（部署简写命令hexo d -g)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下一步注册&lt;a href=&quot;https://www.dnspod.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DNSpod&lt;/a&gt;，然后添加域名，添加记录即可。&lt;/p&gt;
&lt;p&gt;添加域名填写你的域名即可，老规矩不用添加&lt;code&gt;http://&lt;/code&gt;，然后在点击你的域名点进去在添加记录即可（其中记录中CHAME的值是你的github pages的地址）。&lt;br&gt;&lt;img src=&quot;/images/1460101633500.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么现在把你本地的&lt;code&gt;Hexo&lt;/code&gt;生成一下在提交到&lt;code&gt;Github pages&lt;/code&gt;上吧（生成和提交简写命令&lt;code&gt;hexo d -g&lt;/code&gt;），然后打开你的浏览器输入你购买的域名尝试吧。笔者的博客域名：&lt;a href=&quot;http://xiaopingblog.cn/&quot;&gt;http://xiaopingblog.cn/&lt;/a&gt; 大家尽情的去蹂躏吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps:万网DNS地址更换貌似需要一段时间才能生效，如果不能访问请晚点或者隔天再访问域名，如果还是不行可能就是出问题了。反正笔者当时运气好，修改了万网DNS之后即时生效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;笔者分享&quot;&gt;&lt;a href=&quot;#笔者分享&quot; class=&quot;headerlink&quot; title=&quot;笔者分享&quot;&gt;&lt;/a&gt;笔者分享&lt;/h1&gt;&lt;p&gt;分享一些笔者用&lt;code&gt;Hexo&lt;/code&gt;写文章的&lt;code&gt;tips&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章管理&quot;&gt;&lt;a href=&quot;#文章管理&quot; class=&quot;headerlink&quot; title=&quot;文章管理&quot;&gt;&lt;/a&gt;文章管理&lt;/h2&gt;&lt;p&gt;一般笔者写文章、修改文章是在本地可视化写文章，然后在使用命令提交上去。笔者使用的是一个&lt;code&gt;hexo&lt;/code&gt;可视化文章管理的插件（hey），地址：&lt;a href=&quot;https://github.com/nihgwu/hexo-hey&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/nihgwu/hexo-hey&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;当然也有一个&lt;code&gt;Hexo&lt;/code&gt;的&lt;code&gt;admin&lt;/code&gt;插件，但是那个插件不支持图片拖拽进来，所以笔者推荐使用&lt;code&gt;hey&lt;/code&gt;。安装和使用详情，参见笔者给出的github地址。&lt;/p&gt;
&lt;h2 id=&quot;shell脚本自动化（可忽略，只是一个想法）&quot;&gt;&lt;a href=&quot;#shell脚本自动化（可忽略，只是一个想法）&quot; class=&quot;headerlink&quot; title=&quot;shell脚本自动化（可忽略，只是一个想法）&quot;&gt;&lt;/a&gt;shell脚本自动化（可忽略，只是一个想法）&lt;/h2&gt;&lt;p&gt;开启&lt;code&gt;Hexo&lt;/code&gt;的本地服务或者提交到github pages这些都是一些终端里的&lt;code&gt;Hexo&lt;/code&gt;命令，所以笔者写了一些&lt;code&gt;shell&lt;/code&gt;脚本，来简化这些操作。所以基本就是用&lt;code&gt;hey&lt;/code&gt;可视化写文章，写好了之后，然后点击&lt;code&gt;一键部署&lt;/code&gt;的&lt;code&gt;shell&lt;/code&gt;脚本，然后就自动发布了（当然这也纯属鸡助，看个人。）。由于&lt;code&gt;shell&lt;/code&gt;脚本比较简单，随意网上搜索资料一大堆。再加上笔者自己写的脚本代码也没上传，在此插入一个一键部署的shell脚本代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd Desktop/Hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cd到自己的站点目录，然后直接使用hexo命令即可。shell脚本自动化操作就是封装了这些命令而已，在此也只是提供这么一个想法，既然我们都是&lt;code&gt;coder&lt;/code&gt;，何不善用自己已有的知识尼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;写到最后&quot;&gt;&lt;a href=&quot;#写到最后&quot; class=&quot;headerlink&quot; title=&quot;写到最后&quot;&gt;&lt;/a&gt;写到最后&lt;/h1&gt;&lt;p&gt;&lt;code&gt;github pages&lt;/code&gt;虽然免费，但毕竟是国外的服务器，国内访问可以稍微缓慢，如果是土豪，可去买一个支持&lt;code&gt;Node.js&lt;/code&gt;的国内云空间即可。总之&lt;code&gt;github pages + hexo&lt;/code&gt;搭建博客还是挺能折腾人的。但毕竟免费，而且身为技术人员不就是该具备折腾的精神吗？&lt;/p&gt;
&lt;h1 id=&quot;反馈问题&quot;&gt;&lt;a href=&quot;#反馈问题&quot; class=&quot;headerlink&quot; title=&quot;反馈问题&quot;&gt;&lt;/a&gt;反馈问题&lt;/h1&gt;&lt;p&gt;具反馈&lt;code&gt;hexo d&lt;/code&gt;部署的时候出现了&lt;code&gt;not found&lt;/code&gt;问题，如果遇上这问题先输入&lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;命令，然后在运行&lt;code&gt;hexo d&lt;/code&gt;部署尝试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;博客搭建好之后，貌似很久没有写文章了，现在就来分享一下我搭建博客的艰苦行程和一些莫名其妙的坑。&lt;br&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
      <category term="Github" scheme="http://xiaopingblog.cn/categories/All/Github/"/>
    
    
      <category term="github" scheme="http://xiaopingblog.cn/tags/github/"/>
    
      <category term="blog" scheme="http://xiaopingblog.cn/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>冒个泡</title>
    <link href="http://xiaopingblog.cn/2016/03/31/%E5%86%92%E4%B8%AA%E6%B3%A1/"/>
    <id>http://xiaopingblog.cn/2016/03/31/冒个泡/</id>
    <published>2016-03-31T02:22:00.000Z</published>
    <updated>2016-05-03T07:21:54.000Z</updated>
    
    <content type="html">&lt;p&gt;冒个泡&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;心好累&quot;&gt;&lt;a href=&quot;#心好累&quot; class=&quot;headerlink&quot; title=&quot;心好累&quot;&gt;&lt;/a&gt;心好累&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;github + hexo + next&lt;/code&gt; 搭建了一个静态博客，折腾一整天。坑也遇到了很多，不过现在基本搭建的差不多了，想想还是小激动滴。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不会告诉你，我其实是闲着蛋疼才搭建的。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;博客演变史&quot;&gt;&lt;a href=&quot;#博客演变史&quot; class=&quot;headerlink&quot; title=&quot;博客演变史&quot;&gt;&lt;/a&gt;博客演变史&lt;/h1&gt;&lt;p&gt;写文章最开始经历的是CSDN，不过现在已经停更了很久了，然后接触的是简书，虽然才几个月时间。不过我打算以后写文章就在此博客里写了，虽然不知道以后会不会再换博客，但至少现在还对它（此博客）充满了新鲜感。附上我之前在简书写的文章地址与标题吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/a6a0abac1c4a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;那些不为人知的KVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/cc6e13365b7e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为Xcode添加删除行、复制行快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/0ed897e93909&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autolayout框架篇（ZXPAutoLayout）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/6a39a484d5aa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git基础学习（工作中常用命令总结）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/039954b0cbe0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode常用快捷键与技巧分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/aaf8523f6ebf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;让Xcode的控制台支持&lt;code&gt;po frame&lt;/code&gt;的打印&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/4e1f6938c1ca&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;好玩的debugDescription &amp;amp; runtime(debug模式下调试model)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/78fbaf22c357&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac下的常用终端（terminal）命令总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/51c539f61ab0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UI调试神器 for ios：Reveal的使用与破解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/010b23e8a6ee&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我在工作中的常用插件 for Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/3d642af85171&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;调试autolayout：_autolayoutTrace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;iOS技术讨论群，有兴趣的朋友可以进群交流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;iOS高端技术群（只接收有经验的人，加群请附上经验年限，博主是此群群主）：246063386&lt;/p&gt;
&lt;p&gt;iOS开发交流群（有无经验都可以交流，博主是此群管理员二锤）：240341882&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好消息：&lt;br&gt;1）博主也兼职出售手机POS机（手机上刷卡），厂家直销哦，优惠多多。&lt;br&gt;2）博主也承接外包（Java，Android，iOS，UI等），We are a team.&lt;br&gt;有意向者请加QQ沟通（加Q请在问题里注明您的业务，否则会拒绝添加）：974792506&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;冒个泡&lt;br&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xiaopingblog.cn/2015/04/29/hello-world/"/>
    <id>http://xiaopingblog.cn/2015/04/29/hello-world/</id>
    <published>2015-04-29T04:39:04.000Z</published>
    <updated>2016-06-06T06:32:36.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="All" scheme="http://xiaopingblog.cn/categories/All/"/>
    
    
      <category term="All" scheme="http://xiaopingblog.cn/tags/All/"/>
    
  </entry>
  
</feed>
